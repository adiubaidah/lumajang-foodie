generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  foodie
  owner
  admin
}

enum Gender {
  L
  P
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  email     String  @unique
  password  String
  isActive  Boolean @default(true)
  isPrivate Boolean @default(false)
  role      Role    @default(foodie)
  name      String

  gender          Gender?
  subdistrictId   String?      @db.ObjectId
  subdistrict     Subdistrict? @relation(fields: [subdistrictId], references: [id])
  description     String?
  image           String?
  backgroundImage String?
  ownerPlaces     Place[]

  placeReviews PlaceReview[]

  menuReviews MenuReview[]

  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds String[]       @db.ObjectId

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  messages Message[]

  following          UserFollow[]         @relation("UserFollowing")
  followers          UserFollow[]         @relation("UserFollowers")
  placeArchive       PlaceArchive[]
  menuArchive        MenuArchive[]
  publicConversation PublicConversation[]
}

model UserFollow {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  follower    User   @relation("UserFollowers", fields: [followerId], references: [id])
  followerId  String @db.ObjectId
  following   User   @relation("UserFollowing", fields: [followingId], references: [id])
  followingId String @db.ObjectId

  @@unique([followerId, followingId])
}

model Subdistrict {
  id    String  @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  Place Place[]
  User  User[]
}

model PlacePreferences {
  id     String                    @id @default(auto()) @map("_id") @db.ObjectId
  label  String
  value  String                    @unique
  places PlacePreferencesOnPlace[]
}

model PlacePreferencesOnPlace {
  id                 String           @id @default(auto()) @map("_id") @db.ObjectId
  placeId            String           @db.ObjectId
  placePreferencesId String           @db.ObjectId
  place              Place            @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placePreferences   PlacePreferences @relation(fields: [placePreferencesId], references: [id], onDelete: Cascade)
}

model Place {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  slug          String         @unique
  placeGoogleId String?
  googleRating  Float?
  name          String
  description   String?
  address       String
  location      Json
  openingHours  OpeningHours[]
  websiteUri    String?
  phoneNumber   String
  subdistrict   Subdistrict    @relation(fields: [subdistrictId], references: [id])
  subdistrictId String         @db.ObjectId
  owner         User?          @relation(fields: [ownerId], references: [id])
  ownerId       String?        @db.ObjectId

  photos             PlacePhoto[]
  menus              Menu[]
  reviews            PlaceReview[]
  archives           PlaceArchive[]
  preferences        PlacePreferencesOnPlace[]
  Message            Message[]
  publicConversation PublicConversation[]
}

type OpeningHours {
  day       String
  openTime  String?
  closeTime String?
}

model PlaceReview {
  id        String             @id @default(auto()) @map("_id") @db.ObjectId
  star      Int
  review    String
  userId    String             @db.ObjectId
  user      User               @relation(fields: [userId], references: [id])
  placeId   String             @db.ObjectId
  place     Place              @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  photos    PlaceReviewPhoto[]

  @@unique([userId, placeId])
}

model PlaceReviewPhoto {
  id            String      @id @default(auto()) @map("_id") @db.ObjectId
  url           String
  placeReview   PlaceReview @relation(fields: [placeReviewId], references: [id], onDelete: Cascade)
  placeReviewId String      @db.ObjectId
}

enum PlacePhotoType {
  gallery
  menu
  thumbnail
}

model PlacePhoto {
  id                String         @id @default(auto()) @map("_id") @db.ObjectId
  url               String
  type              PlacePhotoType
  thumbnailPosition Int?
  place             Place          @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId           String         @db.ObjectId
}

model PlaceArchive {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  placeId String @db.ObjectId
  place   Place  @relation(fields: [placeId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation(fields: [userId], references: [id])

  @@unique([placeId, userId])
}

enum MenuType {
  food
  drink
}

model Menu {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  slug    String   @unique
  name    String
  photo   String
  promo   String?
  type    MenuType
  price   Int
  place   Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId String   @db.ObjectId

  reviews  MenuReview[]
  archives MenuArchive[]
}

model MenuReview {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  star      Int
  review    String
  menuId    String   @db.ObjectId
  menu      Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([menuId, userId])
}

model MenuArchive {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  menuId String @db.ObjectId
  menu   Menu   @relation(fields: [menuId], references: [id], onDelete: Cascade)
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])

  @@unique([menuId, userId])
}

model PublicConversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  body      String?
  placeId   String?  @db.ObjectId
  place     Place?   @relation(fields: [placeId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  senderId  String   @db.ObjectId
  sender    User     @relation(fields: [senderId], references: [id])
}

model Conversation {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  isGroup       Boolean   @default(false)
  lastMessageAt DateTime  @default(now())
  messages      Message[]
  userIds       String[]  @db.ObjectId
  users         User[]    @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  placeId        String?      @db.ObjectId
  place          Place?       @relation(fields: [placeId], references: [id], onDelete: Cascade)
  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}
